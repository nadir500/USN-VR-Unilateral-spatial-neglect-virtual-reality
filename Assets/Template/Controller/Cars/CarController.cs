using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CarController : MonoBehaviour
{
    /*
     Car Controller aims to generate cars on the roads that is generated by road controller class 
     */

    [HideInInspector]
    public const float streetPathWidth = 5;        //  the width of pair of paths
    public const float sidewalkWidth = 5f;         //  the width of sidewalk
    public const float midwalkWidth = 1.36f;       //  the width of midwalk
    int numberOfPathsInSingleRoad;
    public CheckPointsController checkPointsController;  //reaching checkpoint controller for event subscribe when generate at the start of the game 

    public GameObjectHandler carObjectHandler;
    void Start()
    {
        InitializeCars();
    }

    void InitializeCars()
    {
        checkPointsController.startTheGameCheckPointReachedEvent += CarsOnFastRoad; //subscribe the event 
    }

    public void CarsOnFastRoad()
    {
        if (MainMenu.playMode == 1)
        {
            numberOfPathsInSingleRoad = ExperimentParameters.lanes_per_direction;
            //switch cases 
            switch (ExperimentParameters.carType)
            {

                case "car":
                    carObjectHandler =
                        new GameObjectHandler(Resources.Load("Prefabs/Car") as GameObject, //pooling from the prefab with copies that is like the number of paths in each street
                                        numberOfPathsInSingleRoad * 10 * 2, true, "");          //making a prefab copy with a number enough to cover a whole one path 

                    break;
                case "truck":
                  carObjectHandler =
                        new GameObjectHandler(Resources.Load("Prefabs/Truck") as GameObject, //pooling from the prefab with copies that is like the number of paths in each street
                                        numberOfPathsInSingleRoad * 10 * 2, true, "");          //making a prefab copy with a number enough to cover a whole one path 

                    break;
                case "bus":
                  carObjectHandler =
                        new GameObjectHandler(Resources.Load("Prefabs/Bus") as GameObject, //pooling from the prefab with copies that is like the number of paths in each street
                                        numberOfPathsInSingleRoad * 10 * 2, true, "");          //making a prefab copy with a number enough to cover a whole one path 

                    break;
            }


            InstantiateCarsFastRoad(carObjectHandler);
            carObjectHandler.DeactivateAll(); //deactivate all the cars after putting every component we want 
        }

    }
    /*we need to instantiate the cars in the scene with the perfect positions on the road when generating it */
    public void InstantiateCarsFastRoad(GameObjectHandler carObjectHandler)
    {
        //knowing which rotation and direction to instantiate the car
        string[] carDirection = ExperimentParameters.streetsDirections.Split(' ');

        for (int i = 0; i < ExperimentParameters.lanes_per_direction; i++) //2 cars each road
        {
            //now i am seperating between going cars which is the cars from left to right direction
            //and back cars which is from right to left direction
            GameObject parent1 = new GameObject("parent " + i); //making parent object for each generated lane's cars 
            GameObject parent2 = new GameObject("wat " + i);    //making parent object for each generated lane's cars
            GameObject car1, car2;
            int yRotate;  //to know the rotation of the car before instantiate 

            for (int j = 0; j < 10; j++)
            {
                yRotate = (ExperimentParameters.streetsDirections.Split()[0].Equals("Right")) ? -1 : +1;  //identify the rotation 
                car1 = carObjectHandler.RetrieveInstance(new Vector3(sidewalkWidth + (streetPathWidth / 4) + (i * (streetPathWidth / 2)),
                         -2.0f, yRotate * (190.0f + ExperimentParameters.distanceBetweenCars)),
                                            Quaternion.Euler(new Vector3(0, yRotate * -90, 0)));
                car1.AddComponent<CarMove>();  //adding the CarMove Script  
                car1.GetComponent<CarMove>().carDirection = ExperimentParameters.streetsDirections.Split()[0];      //describe which direction 
                car1.transform.parent = parent1.transform; //putting the instantiated car to a parent 

                if (ExperimentParameters.streetsDirections.Split(' ').Length > 1)
                {
                    yRotate = (ExperimentParameters.streetsDirections.Equals("Left To Right")) ? -1 : 1;
                    car2 = carObjectHandler.RetrieveInstance(new Vector3(/*-0.2f +*/ sidewalkWidth + (numberOfPathsInSingleRoad * (streetPathWidth / 2)) + midwalkWidth + (streetPathWidth / 4) + (i * (streetPathWidth / 2)), -2.0f, yRotate * (190.0f + ExperimentParameters.distanceBetweenCars)), Quaternion.Euler(new Vector3(0, yRotate * -90, 0)));
                    car2.AddComponent<CarMove>();   //adding the CarMove Script  
                    car2.GetComponent<CarMove>().carDirection = ExperimentParameters.streetsDirections.Split()[2];  //describe which direction 
                    car2.transform.parent = parent2.transform; //putting the instantiated car to a parent 
                }

            }
            parent1.AddComponent<CarParentOnRoad>(); //adding a class to the parent (each lane) to manage the cars in the scene
            parent2.AddComponent<CarParentOnRoad>(); //adding a class to the parent (each lane) to manage the cars in the scene
        }

    }
}